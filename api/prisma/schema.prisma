generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id           Int        @id @default(autoincrement())
  nome         String     @db.VarChar(150)
  cnpj         String?    @unique
  email        String?    @unique
  telefone     String?    @db.VarChar(20)
  endereco     String?    @db.VarChar(255)
  usuario      Usuario?
  clientes     Cliente[]
  produtos     Produto[]
  propostas    Proposta[]
  operacoes    Caixa[]
  criadoEm     DateTime   @default(now())
  atualizadoEm DateTime   @updatedAt
  Venda        Venda[]
}

model Usuario {
  id        Int     @id @default(autoincrement())
  nome      String  @db.VarChar(100)
  email     String  @unique
  senha     String  @db.VarChar(255)
  empresaId Int     @unique
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model Cliente {
  id       Int     @id @default(autoincrement())
  nome     String  @db.VarChar(150)
  cpf      String? @unique
  cnpj     String? @unique
  email    String? @unique
  telefone String? @db.VarChar(20)
  endereco String? @db.VarChar(255)

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  criadoEm     DateTime   @default(now())
  atualizadoEm DateTime   @updatedAt
  propostas    Proposta[]
  Venda        Venda[]
}

model Produto {
  id          Int     @id @default(autoincrement())
  nome        String  @db.VarChar(100)
  marca       String? @db.VarChar(100)
  categoria   String? @db.VarChar(100)
  precoVenda  Float
  precoCompra Float?
  estoque     Int     @default(0)
  imagem      String? @db.VarChar(255)

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  VendaItem    VendaItem[]
}

model Proposta {
  id         Int      @id @default(autoincrement())
  numero     Int
  descricao  String   @db.VarChar(255)
  data       DateTime @default(now())
  status     String   @db.VarChar(100)
  valorTotal Float

  clienteId Int?
  cliente   Cliente? @relation(fields: [clienteId], references: [id], onDelete: SetNull)

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model Caixa {
  id            Int           @id @default(autoincrement())
  dataOperacao  DateTime      @default(now())
  tipoOperacao  TipoOperacao
  meioPagamento MeioPagamento
  descricao     String?       @db.VarChar(255)
  valor         Float

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

enum TipoOperacao {
  ENTRADA
  SAIDA
}

enum MeioPagamento {
  PIX
  CARTAO
  DINHEIRO
  BOLETO
  TRANSFERENCIA
}

model Venda {
  id            Int           @id @default(autoincrement())
  data          DateTime      @default(now())
  total         Float
  meioPagamento MeioPagamento
  empresaId     Int
  empresa       Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  clienteId Int?
  cliente   Cliente? @relation(fields: [clienteId], references: [id], onDelete: SetNull)

  itens        VendaItem[]
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
}

model VendaItem {
  id            Int      @id @default(autoincrement())
  vendaId       Int
  venda         Venda    @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  produtoId     Int
  produto       Produto  @relation(fields: [produtoId], references: [id], onDelete: Restrict)
  quantidade    Int
  precoUnitario Float
  subtotal      Float
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
}
